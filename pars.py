import logging
import time
import threading
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-–±–æ—Ç–∞ ===
TOKEN = '8360255097:AAE4RCe_x_xKNDbDFBuhcKVhY17C2JjZ9Sk'

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
current_schedule = ""
active_chats = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ chat_id, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∞–ª–∏—Å—å —Å –±–æ—Ç–æ–º
driver = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ ===
def init_driver():
    global driver
    if driver is None:
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        driver = webdriver.Chrome(options=options)

# === –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ ===
def close_driver():
    global driver
    if driver:
        driver.quit()
        driver = None

# === –ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥—Ä–∞–π–≤–µ—Ä–∞) ===
def get_schedule():
    global driver
    try:
        if driver is None:
            init_driver()

        driver.get("https://www.—è–º–∫-—Å–∞–ª–µ—Ö–∞—Ä–¥.—Ä—Ñ/")
        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))

        # –ö–ª–∏–∫ –ø–æ "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é"
        tech_dept = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@value='otp']")))
        tech_dept.click()

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "24–í–ï–ë"
        wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@value='24–í–ï–ë']")))

        # –ö–ª–∏–∫ –ø–æ "24–í–ï–ë"
        group_24veb = driver.find_element(By.XPATH, "//button[@value='24–í–ï–ë']")
        group_24veb.click()

        # –ñ–¥—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        wait.until(EC.visibility_of_element_located((By.ID, "modal1")))
        time.sleep(2)

        # –ü–æ–ª—É—á–∞–µ–º HTML
        html = driver.page_source
        soup = BeautifulSoup(html, 'html.parser')

        modal = soup.find('div', id='modal1')
        schedule_text = ""
        if modal:
            schedule_divs = modal.find_all('div', class_='container_table uchen')

            for i, div in enumerate(schedule_divs):
                day_header = div.find_previous_sibling('div', class_='day_header')
                day_title = day_header.get_text(strip=True) if day_header else f"–î–µ–Ω—å {i+1}"
                schedule_text += f"\n<b>üìÖ {day_title}</b>\n\n"

                table = div.find('table')
                if table:
                    rows = table.find_all('tr')
                    for idx, row in enumerate(rows):
                        cells = row.find_all(['th', 'td'])
                        cell_texts = [cell.get_text(strip=True) for cell in cells]

                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–æ–±—ã—á–Ω–æ —ç—Ç–æ ['–ü–∞—Ä–∞', '–ø—Ä–µ–¥–º–µ—Ç', ...])
                        if idx == 0 and '–ü–∞—Ä–∞' in cell_texts:
                            continue

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: –ü–∞—Ä–∞ | –ü—Ä–µ–¥–º–µ—Ç | –ö–∞–±–∏–Ω–µ—Ç | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å | –í—Ä–µ–º—è
                        if len(cell_texts) >= 4:
                            para = cell_texts[0] if cell_texts[0] else "‚Äì"
                            predmet = cell_texts[1] if len(cell_texts) > 1 and cell_texts[1] else "‚Äì"
                            kabinet = cell_texts[2] if len(cell_texts) > 2 and cell_texts[2] else "‚Äì"
                            prepod = cell_texts[3] if len(cell_texts) > 3 and cell_texts[3] else "‚Äì"
                            vremya = cell_texts[4] if len(cell_texts) > 4 and cell_texts[4] else "‚Äì"

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫—Ä–∞—Å–∏–≤–æ
                            schedule_text += f"<b>{para}</b> ‚Äî {predmet}\n"
                            schedule_text += f"     üìç {kabinet} | üë®‚Äçüè´ {prepod} | ‚è∞ {vremya}\n\n"
                        elif len(cell_texts) == 1 and cell_texts[0] and '‚Äì' not in cell_texts[0]:
                            # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:05-09:50)
                            schedule_text += f"     ‚è∞ {cell_texts[0]}\n\n"
                else:
                    schedule_text += "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"

        else:
            schedule_text = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"

    except Exception as e:
        schedule_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}"

    return schedule_text


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def check_schedule_updates(app):
    global current_schedule

    while True:
        new_schedule = get_schedule()

        if new_schedule != current_schedule:
            if current_schedule:
                # –ë—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —á–∞—Ç–∞–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                tasks = []
                for chat_id in active_chats:
                    task = app.bot.send_message(chat_id=chat_id, text="üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å!\n\n" + new_schedule, parse_mode='HTML')
                    tasks.append(task)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                try:
                    await asyncio.gather(*tasks, return_exceptions=True)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

            current_schedule = new_schedule

        # –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(1800)  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω—É—Ç


# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–ù–∞–∂–º–∏ /get_schedule, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 24–í–ï–ë."
    )


async def get_schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)

    await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    schedule = get_schedule()
    await context.bot.send_message(chat_id=chat_id, text=schedule, parse_mode='HTML')


def main():
    global current_schedule
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_schedule", get_schedule_command))

    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_scheduler():
        import asyncio
        # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncio –≤ –ø–æ—Ç–æ–∫–µ
        asyncio.run(check_schedule_updates(application))

    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    try:
        main()
    finally:
        close_driver()